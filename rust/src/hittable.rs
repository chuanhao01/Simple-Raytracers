use std::rc::Rc;

use crate::{helper::Interval, ray::Ray, Materials, Vec3};

pub struct HitRecord {
    /// Unit Vector of the normal generated by the hit ray, going against the direction of the hit ray
    pub against_normal_unit: Vec3,
    /// Point at which the hit occurs
    pub p: Vec3,
    /// t value used to generate the hit Point from the ray
    pub t: f64,
    /// If the ray hits from the outside
    pub front_face: bool,
}

impl HitRecord {
    /// Used to create the HitRecord object
    /// Takes in the ray that Hits the object as well as the
    pub fn new(_ray: &Ray, outward_normal_unit: &Vec3, t: f64) -> Self {
        let p = _ray.at(t);
        let front_face = Vec3::dot(&_ray.direction, outward_normal_unit) < 0_f64;
        let against_normal_unit = if front_face {
            outward_normal_unit.clone()
        } else {
            -outward_normal_unit.clone()
        };
        HitRecord {
            against_normal_unit,
            p,
            t,
            front_face,
        }
    }
}

pub trait Hittable {
    fn hit(&self, _ray: &Ray, valid_t_interval: Interval) -> Option<Vec3>;
}
